<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text" xml:lang="en"></title>
  <link type="application/atom+xml" href="/multicorn/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2015-04-15T16:21:06Z</updated>
  <id>/multicorn</id>
  <author>
    <name></name>
    <email></email>
  </author>
  
  <entry>
    <title>Import foreign schema support in Multicorn</title>
    <link rel="alternate" type="text/html" href="/postgresql/multicorn/python/2015/04/05/multicorn_import_foreign_schema/" />
    <published>2015-04-05T17:32:29Z</published>
    <updated>2015-04-05T17:32:29+02:00</updated>
    <id>/postgresql/multicorn/python/2015/04/05/multicorn_import_foreign_schema</id>
    <content type="html"><![CDATA[ <p>Some of you may have noticed that support for the <strong>IMPORT FOREIGN SCHEMA</strong>
statement has landed in the PostgreSQL source tree last july. This new command
allows users to automatically map foreign tables to local ones.</p>

<h2 id="use-case">Use-Case</h2>

<p>Previously, if you wanted to use the postgres_fdw Foreign Data Wrapper
to access data stored in a remote database you had to:</p>

<ul>
  <li>Create the extension</li>
  <li>Create a server</li>
  <li>Create a user mapping</li>
  <li>For each remote table:
    <ul>
      <li>Create a <strong>FOREIGN TABLE</strong> which structures matches the remote one</li>
    </ul>
  </li>
</ul>

<p>This last step is tedious, and error prone: you have to match the column names,
in the right order, with the right type.</p>

<p>The <strong>IMPORT FOREIGN SCHEMA</strong> statements allows you to automatically create a
foreign table object for each object available remotely.</p>

<h2 id="multicorn-implementation">Multicorn implementation</h2>

<p>The API has been implemented in Multicorn for a few months, lingering in its own
branch.</p>

<p>I just merged it back to the master branch, and this feature will land in an
upcoming 1.2.0 release. In the meantime, test it !</p>

<h1 id="the-api">The API</h1>

<p>Its simple, like always with Multicorn. FDW just have to override the
import_schema method:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="nd">@classmethod</span>
  <span class="k">def</span> <span class="nf">import_schema</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">schema</span><span class="p">,</span> <span class="n">srv_options</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">restriction_type</span><span class="p">,</span>
                    <span class="n">restricts</span><span class="p">)</span></code></pre></div></p>

<p>This method just has to build a list of <a href="http://multicorn.readthedocs.org/en/latest/api.html#multicorn.TableDefinition">TableDefinition</a> objects:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">return</span> <span class="p">[</span>
  <span class="n">TableDefinition</span><span class="p">(</span><span class="err">“</span><span class="n">table_name</span><span class="err">”</span><span class="p">,</span> <span class="n">schema</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
    <span class="n">columns</span><span class="o">=</span><span class="p">[</span>
      <span class="n">ColumnDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="err">”</span><span class="n">column_name</span><span class="err">”</span><span class="p">,</span>
        <span class="n">type_name</span><span class="o">=</span><span class="err">”</span><span class="n">integer</span><span class="err">”</span><span class="p">)])]</span></code></pre></div></p>

<p>And thats it !</p>

<p>As for now, the only FDW shipped with Multicorn that does implement this API is
the <a href="http://multicorn.readthedocs.org/en/latest/foreign-data-wrappers/sqlalchemyfdw.html#sqlalchemy-foreign-data-wrapper">sqlalchemyfdw</a>.</p>

<h1 id="sqlalchemyfdw-test-run">SQLAlchemyFDW test run</h1>

<p>So, with this API in mind, I conducted a small test: trying to import an Oracle
schema as well as a MS-SQLServer schema:</p>

<p><div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">multicorn</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="n">SERVER</span> <span class="n">mssql_server</span> <span class="k">FOREIGN</span> <span class="k">DATA</span> <span class="n">WRAPPER</span> <span class="n">multicorn</span>
<span class="k">OPTIONS</span> <span class="p">(</span>
  <span class="n">wrapper</span> <span class="err">‘</span><span class="n">multicorn</span><span class="p">.</span><span class="n">sqlalchemyfdw</span><span class="p">.</span><span class="n">SqlAlchemyFdw</span><span class="err">’</span><span class="p">,</span>
  <span class="n">drivername</span> <span class="err">‘</span><span class="n">mssql</span><span class="o">+</span><span class="n">pymssql</span><span class="err">’</span><span class="p">,</span>
  <span class="k">host</span> <span class="err">‘</span><span class="n">myhost</span><span class="err">’</span><span class="p">,</span>
  <span class="n">port</span> <span class="err">‘</span><span class="mi">1433</span><span class="err">’</span><span class="p">,</span>
  <span class="k">database</span> <span class="err">‘</span><span class="n">testmulticorn</span><span class="err">’</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">USER</span> <span class="n">MAPPING</span> <span class="k">FOR</span> <span class="n">ronan</span> <span class="n">SERVER</span> <span class="n">mssql_server</span> <span class="k">OPTIONS</span> <span class="p">(</span><span class="n">username</span> <span class="err">‘</span><span class="k">user</span><span class="err">’</span><span class="p">,</span> <span class="n">password</span> <span class="err">‘</span><span class="n">password</span><span class="err">’</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">SCHEMA</span> <span class="n">mssql</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">IMPORT</span> <span class="k">FOREIGN</span> <span class="k">SCHEMA</span> <span class="n">dbo</span> <span class="k">FROM</span> <span class="n">SERVER</span> <span class="n">mssql_server</span> <span class="k">INTO</span> <span class="n">mssql</span> <span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="n">SERVER</span> <span class="n">sqlite_server</span> <span class="k">FOREIGN</span> <span class="k">DATA</span> <span class="n">WRAPPER</span> <span class="n">multicorn</span>
<span class="k">OPTIONS</span> <span class="p">(</span>
  <span class="n">wrapper</span> <span class="err">‘</span><span class="n">multicorn</span><span class="p">.</span><span class="n">sqlalchemyfdw</span><span class="p">.</span><span class="n">SqlAlchemyFdw</span><span class="err">’</span><span class="p">,</span>
  <span class="n">drivername</span> <span class="err">‘</span><span class="n">sqlite</span><span class="err">’</span><span class="p">,</span>
  <span class="k">database</span> <span class="err">‘</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">ronan</span><span class="o">/</span><span class="n">mydb</span><span class="p">.</span><span class="n">sqlite3</span><span class="err">’</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">SCHEMA</span> <span class="n">sqlite</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">IMPORT</span> <span class="k">FOREIGN</span> <span class="k">SCHEMA</span> <span class="n">main</span> <span class="k">FROM</span> <span class="n">SERVER</span> <span class="n">sqlite_server</span> <span class="k">INTO</span> <span class="n">sqlite</span> <span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">mssql</span><span class="p">.</span><span class="n">t1</span><span class="p">;</span>
<span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">sqlite</span><span class="p">.</span><span class="n">t1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">sqlite</span><span class="p">.</span><span class="n">t1</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">DEFAULT</span><span class="p">);</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">sqlite</span><span class="p">.</span><span class="n">t1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="n">SERVER</span> <span class="n">oracle_server</span> <span class="k">FOREIGN</span> <span class="k">DATA</span> <span class="n">WRAPPER</span> <span class="n">multicorn</span>
<span class="k">OPTIONS</span> <span class="p">(</span>
  <span class="n">wrapper</span> <span class="err">‘</span><span class="n">multicorn</span><span class="p">.</span><span class="n">sqlalchemyfdw</span><span class="p">.</span><span class="n">SqlAlchemyFdw</span><span class="err">’</span><span class="p">,</span>
  <span class="n">drivername</span> <span class="err">‘</span><span class="n">oracle</span><span class="err">’</span><span class="p">,</span>
  <span class="k">host</span> <span class="err">‘</span><span class="n">another_host</span><span class="err">’</span><span class="p">,</span>
  <span class="k">database</span> <span class="err">‘</span><span class="n">testmulticorn</span><span class="err">’</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">USER</span> <span class="n">MAPPING</span> <span class="k">FOR</span> <span class="n">ronan</span> <span class="n">SERVER</span> <span class="n">oracle_server</span> <span class="k">OPTIONS</span> <span class="p">(</span><span class="n">username</span> <span class="err">‘</span><span class="k">user</span><span class="err">’</span><span class="p">,</span> <span class="n">password</span> <span class="err">‘</span><span class="n">password</span><span class="err">’</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">SCHEMA</span> <span class="n">oracle</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">IMPORT</span> <span class="k">FOREIGN</span> <span class="k">SCHEMA</span> <span class="n">ronan</span> <span class="k">FROM</span> <span class="n">SERVER</span> <span class="n">oracle_server</span> <span class="k">INTO</span> <span class="n">oracle</span> <span class="p">;</span></code></pre></div></p>

<p>And thats it ! Its sufficient to query tables from sqllite, oracle and MS-SQL
from a single connection.</p>

<p>Once again, feel free to test it and to report any bugs you may find along the
way !</p>

 ]]></content>
  </entry>
  
</feed>
